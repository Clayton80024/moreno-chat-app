(globalThis.TURBOPACK||(globalThis.TURBOPACK=[])).push(["object"==typeof document?document.currentScript:void 0,6085,e=>{"use strict";e.s(["Headers",()=>i,"Request",()=>n,"Response",()=>o,"default",()=>t,"fetch",()=>s]);var r="undefined"!=typeof self?self:"undefined"!=typeof window?window:e.g;let s=r.fetch,t=r.fetch.bind(r),i=r.Headers,n=r.Request,o=r.Response},33576,e=>{"use strict";e.s(["UserGroupIcon",()=>s],33576);var r=e.i(71645);let s=r.forwardRef(function(e,s){let{title:t,titleId:i,...n}=e;return r.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true","data-slot":"icon",ref:s,"aria-labelledby":i},n),t?r.createElement("title",{id:i},t):null,r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M18 18.72a9.094 9.094 0 0 0 3.741-.479 3 3 0 0 0-4.682-2.72m.94 3.198.001.031c0 .225-.012.447-.037.666A11.944 11.944 0 0 1 12 21c-2.17 0-4.207-.576-5.963-1.584A6.062 6.062 0 0 1 6 18.719m12 0a5.971 5.971 0 0 0-.941-3.197m0 0A5.995 5.995 0 0 0 12 12.75a5.995 5.995 0 0 0-5.058 2.772m0 0a3 3 0 0 0-4.681 2.72 8.986 8.986 0 0 0 3.74.477m.94-3.197a5.971 5.971 0 0 0-.94 3.197M15 6.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm6 3a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Zm-13.5 0a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Z"}))})},39875,e=>{"use strict";e.s(["MagnifyingGlassIcon",()=>s],39875);var r=e.i(71645);let s=r.forwardRef(function(e,s){let{title:t,titleId:i,...n}=e;return r.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true","data-slot":"icon",ref:s,"aria-labelledby":i},n),t?r.createElement("title",{id:i},t):null,r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"}))})},27217,e=>{"use strict";e.s(["XMarkIcon",()=>s],27217);var r=e.i(71645);let s=r.forwardRef(function(e,s){let{title:t,titleId:i,...n}=e;return r.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true","data-slot":"icon",ref:s,"aria-labelledby":i},n),t?r.createElement("title",{id:i},t):null,r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M6 18 18 6M6 6l12 12"}))})},70011,e=>{"use strict";e.s(["ChatsService",()=>s]);var r=e.i(17927);class s{static async getUserChats(e){try{console.log("🔵 Getting user chats for:",e),console.log("🔵 Fetching user participation records...");let{data:n,error:o}=await r.supabase.from("chat_participants").select("chat_id, last_read_at").eq("user_id",e);if(o){var s,t,i;if(console.error("🔴 Error fetching user participants:",o),console.error("🔴 Error code:",o.code),console.error("🔴 Error message:",o.message),console.error("🔴 Error details:",o.details),console.error("🔴 Error hint:",o.hint),console.error("🔴 Full error object:",JSON.stringify(o,null,2)),(null==(s=o.message)?void 0:s.includes("infinite recursion"))||(null==(t=o.message)?void 0:t.includes("policy"))||(null==(i=o.message)?void 0:i.includes("permission"))||"42501"===o.code||"2BP01"===o.code||"42710"===o.code)return console.warn("⚠️ RLS policy issue detected, returning empty chats"),[];throw Error(o.message||"Unknown error")}if(!n||0===n.length)return console.log("🔵 No chat participants found for user"),[];let a=n.map(e=>e.chat_id);console.log("🔵 Found chat IDs:",a);let{data:l,error:c}=await r.supabase.from("chats").select("*").in("id",a).order("last_message_at",{ascending:!1});if(c)throw console.error("🔴 Error fetching chats:",c),Error(c.message);let d=await Promise.all((l||[]).map(async e=>{let s=n.find(r=>r.chat_id===e.id),t=[];try{let{data:s}=await r.supabase.from("chat_participants").select("*").eq("chat_id",e.id);if(s&&s.length>0){let e=s.map(e=>e.user_id),{data:i}=await r.supabase.from("user_profiles").select("id, full_name, username, avatar_url, bio, is_online, last_seen, location").in("id",e);t=s.map(e=>({...e,user_profile:null==i?void 0:i.find(r=>r.id===e.user_id)}))}}catch(r){console.warn("⚠️ Could not fetch participants for chat:",e.id,r)}let i=null;try{let{data:s}=await r.supabase.from("messages").select("*").eq("chat_id",e.id).order("created_at",{ascending:!1}).limit(1);if(s&&s.length>0){let e=s[0],{data:t}=await r.supabase.from("user_profiles").select("id, full_name, username, avatar_url, location").eq("id",e.sender_id).single();i={...e,sender_profile:t}}}catch(r){console.warn("⚠️ Could not fetch last message for chat:",e.id,r)}let o=0;try{let{count:t}=await r.supabase.from("messages").select("*",{count:"exact",head:!0}).eq("chat_id",e.id).gt("created_at",(null==s?void 0:s.last_read_at)||"1970-01-01");o=t||0}catch(r){console.warn("⚠️ Could not fetch unread count for chat:",e.id,r)}return{...e,participants:t,last_message:i,unread_count:o}}));return console.log("✅ Successfully fetched user chats:",d.length),d}catch(e){return console.error("🔴 Error in getUserChats:",e),[]}}static async getChat(e,s){let{data:t,error:i}=await r.supabase.from("chat_participants").select("chat_id").eq("chat_id",e).eq("user_id",s).single();if(i||!t)throw Error("Chat not found or access denied");let{data:n,error:o}=await r.supabase.from("chats").select("*").eq("id",e).single();if(o)throw console.error("🔴 Error fetching chat:",o),Error(o.message);let{data:a}=await r.supabase.from("chat_participants").select("*").eq("chat_id",e),l=[];if(a&&a.length>0){let e=a.map(e=>e.user_id),{data:s}=await r.supabase.from("user_profiles").select("id, full_name, username, avatar_url, bio, is_online, last_seen, location").in("id",e);l=a.map(e=>({...e,user_profile:null==s?void 0:s.find(r=>r.id===e.user_id)}))}let{data:c}=await r.supabase.from("messages").select("*").eq("chat_id",e).order("created_at",{ascending:!1}).limit(1),d=null;if(c&&c.length>0){let e=c[0],{data:s}=await r.supabase.from("user_profiles").select("id, full_name, username, avatar_url, location").eq("id",e.sender_id).single();d={...e,sender_profile:s}}return{...n,participants:l||[],last_message:d||null}}static async createChat(e,s){try{console.log("🔵 Creating chat with creator:",e,"participants:",s.participant_ids);let{data:t,error:i}=await r.supabase.from("chats").insert({name:s.name||null,type:s.type,created_by:e}).select().single();if(i)throw console.error("🔴 Error creating chat:",i),console.error("🔴 Chat error details:",{code:i.code,message:i.message,details:i.details,hint:i.hint}),Error(i.message);console.log("✅ Chat created successfully:",t);let n=[{chat_id:t.id,user_id:e},...s.participant_ids.map(e=>({chat_id:t.id,user_id:e}))];console.log("🔵 Adding participants:",n);let{error:o}=await r.supabase.from("chat_participants").insert(n);if(o)throw console.error("🔴 Error adding participants:",o),console.error("🔴 Participants error details:",{code:o.code,message:o.message,details:o.details,hint:o.hint}),Error(o.message);console.log("✅ Participants added successfully");let a=await this.getChat(t.id,e);return console.log("✅ Chat creation completed:",a),a}catch(e){throw console.error("🔴 Error in createChat:",e),e}}static async addParticipant(e,s,t){let{error:i}=await r.supabase.from("chat_participants").insert({chat_id:e,user_id:s});if(i)throw console.error("🔴 Error adding participant:",i),Error(i.message)}static async removeParticipant(e,s,t){let{error:i}=await r.supabase.from("chat_participants").delete().eq("chat_id",e).eq("user_id",s);if(i)throw console.error("🔴 Error removing participant:",i),Error(i.message)}static async getChatMessages(e,s){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:50,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;try{console.log("🔵 Getting messages for chat:",e,"user:",s);let{data:n,error:o}=await r.supabase.from("chat_participants").select("chat_id").eq("chat_id",e).eq("user_id",s).single();if(o||!n)throw console.error("🔴 User not participant in chat:",o),Error("Chat not found or access denied");console.log("✅ User is participant in chat");let{data:a,error:l}=await r.supabase.from("messages").select("*").eq("chat_id",e).order("created_at",{ascending:!1}).range(i,i+t-1);if(l)throw console.error("🔴 Error fetching messages:",l),console.error("🔴 Error details:",{code:l.code,message:l.message,details:l.details,hint:l.hint}),Error(l.message);if(console.log("✅ Messages fetched:",(null==a?void 0:a.length)||0),!a||0===a.length)return[];let c=[...new Set(a.map(e=>e.sender_id))];console.log("🔵 Getting profiles for senders:",c);let{data:d,error:u}=await r.supabase.from("user_profiles").select("id, full_name, username, avatar_url, location").in("id",c);u&&console.error("🔴 Error fetching profiles:",u),console.log("✅ Profiles fetched:",(null==d?void 0:d.length)||0);let g=new Map;d&&d.forEach(e=>{g.set(e.id,e)});let f=await Promise.all(a.map(async e=>{try{let{data:s}=await r.supabase.from("message_status").select("*").eq("message_id",e.id),t=null;if(e.reply_to_id)try{let{data:s}=await r.supabase.from("messages").select("*").eq("id",e.reply_to_id).single();if(s){let e=g.get(s.sender_id);t={...s,sender_profile:e}}}catch(e){console.warn("⚠️ Error fetching reply message:",e)}return{...e,sender_profile:g.get(e.sender_id)||null,reply_to_message:t,status:s||[]}}catch(r){return console.warn("⚠️ Error fetching message status:",r),{...e,sender_profile:g.get(e.sender_id)||null,reply_to_message:null,status:[]}}}));return console.log("✅ Messages processed with profiles and status"),f.reverse()}catch(e){throw console.error("🔴 Error in getChatMessages:",e),e}}static async sendMessage(e,s,t){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"text",n=arguments.length>4?arguments[4]:void 0;try{console.log("🔵 Sending message to chat:",e,"from:",s);let{data:o,error:a}=await r.supabase.from("chat_participants").select("chat_id").eq("chat_id",e).eq("user_id",s).single();if(a||!o)throw console.error("🔴 User not participant in chat:",a),Error("Chat not found or access denied");console.log("✅ User is participant in chat");let{data:l,error:c}=await r.supabase.from("messages").insert({chat_id:e,sender_id:s,content:t,message_type:i,reply_to_id:n||null}).select("*").single();if(c)throw console.error("🔴 Error sending message:",c),console.error("🔴 Message error details:",{code:c.code,message:c.message,details:c.details,hint:c.hint}),Error(c.message);console.log("✅ Message created successfully:",l.id);let{data:d,error:u}=await r.supabase.from("user_profiles").select("id, full_name, username, avatar_url, location").eq("id",s).single();u&&console.warn("⚠️ Error fetching sender profile:",u),console.log("✅ Sender profile fetched:",(null==d?void 0:d.full_name)||"Unknown");try{let{error:e}=await r.supabase.from("message_status").insert({message_id:l.id,user_id:s,status:"sent",timestamp:new Date().toISOString()});e?console.warn("⚠️ Error creating message status:",e):console.log("✅ Message status created")}catch(e){console.warn("⚠️ Error creating message status:",e)}let g={...l,sender_profile:d||null};return console.log("✅ Message sent successfully with profile"),g}catch(e){throw console.error("🔴 Error in sendMessage:",e),e}}static async markMessagesAsRead(e,s){let{error:t}=await r.supabase.from("chat_participants").update({last_read_at:new Date().toISOString()}).eq("chat_id",e).eq("user_id",s);if(t)throw console.error("🔴 Error updating last_read_at:",t),Error(t.message);let{data:i,error:n}=await r.supabase.from("messages").select("id").eq("chat_id",e).gt("created_at",new Date().toISOString());if(n)return void console.error("🔴 Error fetching unread messages:",n);if(i&&i.length>0){let e=i.map(e=>({message_id:e.id,user_id:s,status:"read"}));await r.supabase.from("message_status").upsert(e,{onConflict:"message_id,user_id"})}}static async editMessage(e,s,t){let{data:i,error:n}=await r.supabase.from("messages").update({content:t,edited_at:new Date().toISOString()}).eq("id",e).eq("sender_id",s).select("*").single();if(n)throw console.error("🔴 Error editing message:",n),Error(n.message);let{data:o}=await r.supabase.from("user_profiles").select("id, full_name, username, avatar_url, location").eq("id",i.sender_id).single();return{...i,sender_profile:o}}static async deleteMessage(e,s){let{error:t}=await r.supabase.from("messages").delete().eq("id",e).eq("sender_id",s);if(t)throw console.error("🔴 Error deleting message:",t),Error(t.message)}static async getOrCreateDirectChat(e,s){let{data:t,error:i}=await r.supabase.from("chats").select("\n        id,\n        name,\n        type,\n        created_by,\n        created_at,\n        updated_at,\n        last_message_at\n      ").eq("type","direct").in("created_by",[e,s]);if(i&&"PGRST116"!==i.code)throw console.error("🔴 Error checking for existing chat:",i),Error(i.message);if(t&&t.length>0)for(let i of t){let{data:t,error:n}=await r.supabase.from("chat_participants").select("user_id").eq("chat_id",i.id).in("user_id",[e,s]);if(n){console.error("🔴 Error checking participants:",n);continue}if(t&&2===t.length)return await this.getChat(i.id,e)}return await this.createChat(e,{type:"direct",participant_ids:[s]})}}},65300,e=>{"use strict";e.s(["FriendsService",()=>s]);var r=e.i(17927);class s{static async testFriendRequestsTable(){try{let{data:e,error:s}=await r.supabase.from("friend_requests").select("id").limit(1);if(s)return console.error("🔴 friend_requests table test failed:",s),!1;return console.log("✅ friend_requests table is accessible"),!0}catch(e){return console.error("🔴 friend_requests table test error:",e),!1}}static async testFriendsTable(){try{console.log("🔵 Testing friends table accessibility..."),console.log("🔵 Test 1: Basic select...");let{data:e,error:s}=await r.supabase.from("friends").select("id").limit(1);if(s){console.error("🔴 Test 1 failed:",s),console.error("🔴 Error code:",s.code),console.error("🔴 Error message:",s.message),console.error("🔴 Error details:",s.details),console.error("🔴 Error hint:",s.hint),console.error("🔴 Full error object:",JSON.stringify(s,null,2)),console.log("🔵 Test 2: Select with user filter...");let{data:e,error:t}=await r.supabase.from("friends").select("id").eq("user_id","00000000-0000-0000-0000-000000000000").limit(1);return t?(console.error("🔴 Test 2 also failed:",t),console.error("🔴 Error code:",t.code),console.error("🔴 Error message:",t.message)):console.log("✅ Test 2 succeeded - issue might be with RLS policies"),!1}return console.log("✅ friends table is accessible"),console.log("🔵 Test 1 data:",e),!0}catch(e){return console.error("🔴 friends table test error:",e),!1}}static async getFriends(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"accepted";try{if(console.log("🔵 Getting friends for user:",e,"with status:",s),!await this.testFriendsTable())return console.warn("⚠️ Friends table is not accessible, returning empty array"),[];let{data:n,error:o}=await r.supabase.from("friends").select("*").eq("user_id",e).eq("status",s).order("created_at",{ascending:!1});if(o){var t,i;if(console.error("🔴 Error fetching friends:",o),console.error("🔴 Error code:",o.code),console.error("🔴 Error message:",o.message),console.error("🔴 Error details:",o.details),console.error("🔴 Error hint:",o.hint),console.error("🔴 Full error object:",JSON.stringify(o,null,2)),(null==(t=o.message)?void 0:t.includes("permission"))||(null==(i=o.message)?void 0:i.includes("policy"))||"42501"===o.code||"2BP01"===o.code||"42710"===o.code)return console.warn("⚠️ RLS policy issue detected, returning empty friends array"),[];throw Error(o.message||"Failed to fetch friends")}let a=await Promise.all((n||[]).map(async e=>{try{let{data:s}=await r.supabase.from("user_profiles").select("id, full_name, username, avatar_url, bio, is_online, last_seen").eq("id",e.friend_id).single();return{...e,friend_profile:s}}catch(r){return console.warn("⚠️ Could not fetch friend profile for:",e.friend_id,r),{...e,friend_profile:null}}}));return console.log("✅ Successfully fetched friends:",a.length),a}catch(e){return console.error("🔴 Error in getFriends:",e),[]}}static async getFriendRequests(e){try{var s,t;console.log("🔵 Getting friend requests for user:",e),console.log("🔵 User ID type:",typeof e,"Length:",e.length);let{data:i,error:n}=await r.supabase.from("friend_requests").select("id").limit(1);if(n)return console.error("🔴 Error accessing friend_requests table:",n),console.error("🔴 Test error details:",{code:n.code,message:n.message,details:n.details,hint:n.hint}),{sent:[],received:[]};console.log("✅ friend_requests table is accessible"),console.log("🔵 Test data:",i);let{data:o,error:a}=await r.supabase.from("friend_requests").select("*").limit(10);console.log("🔵 All friend requests in table:",o),console.log("🔵 All requests error:",a);let[l,c]=await Promise.all([r.supabase.from("friend_requests").select("*").eq("sender_id",e).eq("status","pending").order("created_at",{ascending:!1}),r.supabase.from("friend_requests").select("*").eq("receiver_id",e).eq("status","pending").order("created_at",{ascending:!1})]);console.log("🔵 Sent requests result:",l),console.log("🔵 Received requests result:",c),console.log("🔵 Sent requests count:",(null==(s=l.data)?void 0:s.length)||0),console.log("🔵 Received requests count:",(null==(t=c.data)?void 0:t.length)||0),l.error&&(console.error("🔴 Error fetching sent requests:",l.error),console.error("🔴 Sent error details:",{code:l.error.code,message:l.error.message,details:l.error.details,hint:l.error.hint})),c.error&&(console.error("🔴 Error fetching received requests:",c.error),console.error("🔴 Received error details:",{code:c.error.code,message:c.error.message,details:c.error.details,hint:c.error.hint}));let d=await Promise.all((l.data||[]).map(async e=>{try{let{data:s}=await r.supabase.from("user_profiles").select("id, full_name, username, avatar_url, bio, is_online").eq("id",e.receiver_id).single();return{...e,receiver_profile:s}}catch(r){return console.error("🔴 Error fetching receiver profile:",r),{...e,receiver_profile:null}}})),u=await Promise.all((c.data||[]).map(async e=>{try{let{data:s}=await r.supabase.from("user_profiles").select("id, full_name, username, avatar_url, bio, is_online").eq("id",e.sender_id).single();return{...e,sender_profile:s}}catch(r){return console.error("🔴 Error fetching sender profile:",r),{...e,sender_profile:null}}}));return console.log("✅ Successfully fetched friend requests:",{sent:d.length,received:u.length}),{sent:d,received:u}}catch(e){return console.error("🔴 Error in getFriendRequests:",e),{sent:[],received:[]}}}static async sendFriendRequest(e,s,t){try{console.log("🔵 Sending friend request from:",e,"to:",s);let i=await this.debugFriendshipData(e,s);i.inconsistencies.length>0&&(console.warn("⚠️ Data inconsistencies found:",i.inconsistencies),console.warn("⚠️ Friends data:",i.friendsData),console.warn("⚠️ Friend requests data:",i.friendRequestsData)),console.log("🔵 Checking for existing friendship...");let[n,o]=await Promise.all([r.supabase.from("friends").select("id, status, user_id, friend_id").eq("user_id",e).eq("friend_id",s).maybeSingle(),r.supabase.from("friends").select("id, status, user_id, friend_id").eq("user_id",s).eq("friend_id",e).maybeSingle()]),a=n.data||o.data;if(a){if(console.log("🔴 Existing friendship found:",a),console.log("🔴 Friendship status:",a.status),console.log("🔴 Friendship user_id:",a.user_id),console.log("🔴 Friendship friend_id:",a.friend_id),"accepted"===a.status)throw Error("You are already friends with this user");if("pending"===a.status)throw Error("A friendship request is already pending between you and this user");if("blocked"===a.status)throw Error("This user has been blocked");else throw Error("A friendship relationship already exists between you and this user")}console.log("✅ No existing friendship found"),console.log("🔵 Checking for existing friend request...");let[l,c]=await Promise.all([r.supabase.from("friend_requests").select("id, status, sender_id, receiver_id").eq("sender_id",e).eq("receiver_id",s).maybeSingle(),r.supabase.from("friend_requests").select("id, status, sender_id, receiver_id").eq("sender_id",s).eq("receiver_id",e).maybeSingle()]),d=l.data||c.data;if(d){if(console.log("🔴 Friend request already exists:",d),console.log("🔴 Request status:",d.status),console.log("🔴 Request sender:",d.sender_id),console.log("🔴 Request receiver:",d.receiver_id),"pending"===d.status)if(d.sender_id===e)throw Error("You have already sent a friend request to this user");else throw Error("This user has already sent you a friend request. Please check your received requests.");if("accepted"===d.status)throw Error("You are already friends with this user");if("declined"===d.status)throw Error("Your previous friend request was declined. Please wait before sending another request.");else throw Error("A friend request already exists between you and this user")}console.log("✅ No existing friend request found"),console.log("🔵 Creating friend request...");let{data:u,error:g}=await r.supabase.from("friend_requests").insert({sender_id:e,receiver_id:s,message:t||null,status:"pending"}).select().single();if(g)throw console.error("🔴 Error sending friend request:",g),console.error("🔴 Error code:",g.code),console.error("🔴 Error message:",g.message),console.error("🔴 Error details:",g.details),console.error("🔴 Error hint:",g.hint),Error(g.message||"Failed to send friend request");return console.log("✅ Successfully sent friend request:",u),u}catch(e){throw console.error("🔴 Error in sendFriendRequest:",e),e}}static async acceptFriendRequest(e,s){try{if(console.log("🔵 Accepting friend request:",e,"for user:",s),!await this.testFriendsTable())throw Error("Friends table is not accessible. Please check RLS policies.");let{data:i,error:n}=await r.supabase.from("friend_requests").select("*").eq("id",e).eq("receiver_id",s).eq("status","pending").single();if(n){var t;if(console.error("🔴 Error fetching friend request:",n),console.error("🔴 Error code:",n.code),console.error("🔴 Error message:",n.message),"PGRST116"===n.code)throw Error("Friend request not found or already processed");if(null==(t=n.message)?void 0:t.includes("permission"))throw Error("You do not have permission to accept this request");throw Error("Friend request not found")}if(console.log("🔵 Found friend request:",i),await this.areFriends(i.sender_id,i.receiver_id)){console.log("⚠️ Users are already friends, updating request status"),await r.supabase.from("friend_requests").update({status:"accepted"}).eq("id",e);let{data:t}=await r.supabase.from("friends").select("*").eq("user_id",s).eq("friend_id",i.sender_id).eq("status","accepted").single();return t}let{error:o}=await r.supabase.from("friend_requests").update({status:"accepted"}).eq("id",e).eq("status","pending");if(o)throw console.error("🔴 Error updating friend request:",o),console.error("🔴 Error code:",o.code),console.error("🔴 Error message:",o.message),Error(o.message);console.log("🔵 Updated friend request status to accepted"),console.log("🔵 Creating friendship records...");let{data:a,error:l}=await r.supabase.from("friends").insert([{user_id:i.sender_id,friend_id:i.receiver_id,status:"accepted"},{user_id:i.receiver_id,friend_id:i.sender_id,status:"accepted"}]).select();if(l)throw console.error("🔴 Error creating friendship:",l),console.error("🔴 Error code:",l.code),console.error("🔴 Error message:",l.message),console.error("🔴 Error details:",l.details),console.error("🔴 Error hint:",l.hint),console.error("🔴 Full error object:",JSON.stringify(l,null,2)),await r.supabase.from("friend_requests").update({status:"pending"}).eq("id",e),Error(l.message||"Failed to create friendship");return console.log("✅ Successfully created friendships:",a),a[0]}catch(e){throw console.error("🔴 Error in acceptFriendRequest:",e),e}}static async declineFriendRequest(e,s){try{console.log("🔵 Declining friend request:",e,"for user:",s);let{data:i,error:n}=await r.supabase.from("friend_requests").select("*").eq("id",e).eq("receiver_id",s).eq("status","pending").single();if(n){var t;if(console.error("🔴 Error fetching friend request:",n),console.error("🔴 Error code:",n.code),console.error("🔴 Error message:",n.message),"PGRST116"===n.code)throw Error("Friend request not found or already processed");if(null==(t=n.message)?void 0:t.includes("permission"))throw Error("You do not have permission to decline this request");throw Error("Friend request not found")}console.log("🔵 Found friend request to decline:",i);let{error:o}=await r.supabase.from("friend_requests").update({status:"declined"}).eq("id",e).eq("status","pending");if(o)throw console.error("🔴 Error declining friend request:",o),console.error("🔴 Error code:",o.code),console.error("🔴 Error message:",o.message),Error(o.message||"Failed to decline friend request");console.log("✅ Successfully declined friend request")}catch(e){throw console.error("🔴 Error in declineFriendRequest:",e),e}}static async cancelFriendRequest(e,s){try{console.log("🔵 Canceling friend request:",e,"for user:",s);let{error:t}=await r.supabase.from("friend_requests").delete().eq("id",e).eq("sender_id",s).eq("status","pending");if(t)throw console.error("🔴 Error canceling friend request:",t),console.error("🔴 Error code:",t.code),console.error("🔴 Error message:",t.message),Error(t.message||"Failed to cancel friend request");console.log("✅ Successfully canceled friend request")}catch(e){throw console.error("🔴 Error in cancelFriendRequest:",e),e}}static async removeFriend(e,s){try{console.log("🔵 Removing friend:",e,s);let[t,i]=await Promise.all([r.supabase.from("friends").delete().eq("user_id",e).eq("friend_id",s),r.supabase.from("friends").delete().eq("user_id",s).eq("friend_id",e)]);if(t.error)throw console.error("🔴 Error removing friend (direction 1):",t.error),Error(t.error.message);if(i.error)throw console.error("🔴 Error removing friend (direction 2):",i.error),Error(i.error.message);console.log("✅ Successfully removed friend")}catch(e){throw console.error("🔴 Error in removeFriend:",e),e}}static async blockUser(e,s){await this.removeFriend(e,s);let{error:t}=await r.supabase.from("friends").insert({user_id:e,friend_id:s,status:"blocked"});if(t)throw console.error("🔴 Error blocking user:",t),Error(t.message)}static async unblockUser(e,s){let{error:t}=await r.supabase.from("friends").delete().eq("user_id",e).eq("friend_id",s).eq("status","blocked");if(t)throw console.error("🔴 Error unblocking user:",t),Error(t.message)}static async searchUsers(e,s){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:20;if(!e.trim())return[];let{data:i,error:n}=await r.supabase.from("user_profiles").select("\n        id,\n        full_name,\n        username,\n        avatar_url,\n        bio,\n        location,\n        is_online,\n        last_seen\n      ").neq("id",s).or("full_name.ilike.%".concat(e,"%,username.ilike.%").concat(e,"%")).limit(t);if(n)throw console.error("🔴 Error searching users:",n),Error(n.message);return await Promise.all((i||[]).map(async e=>{let{count:t}=await r.supabase.from("friends").select("*",{count:"exact",head:!0}).eq("user_id",s).eq("status","accepted").in("friend_id",[...await r.supabase.from("friends").select("friend_id").eq("user_id",e.id).eq("status","accepted").then(e=>{var r;return(null==(r=e.data)?void 0:r.map(e=>e.friend_id))||[]})]);return{...e,mutual_friends:t||0}}))}static async debugFriendshipData(e,s){try{console.log("🔵 Debugging friendship data between:",e,s);let[t,i]=await Promise.all([r.supabase.from("friends").select("*").eq("user_id",e).eq("friend_id",s),r.supabase.from("friends").select("*").eq("user_id",s).eq("friend_id",e)]),[n,o]=await Promise.all([r.supabase.from("friend_requests").select("*").eq("sender_id",e).eq("receiver_id",s),r.supabase.from("friend_requests").select("*").eq("sender_id",s).eq("receiver_id",e)]),a=[...t.data||[],...i.data||[]],l=[...n.data||[],...o.data||[]],c=[];return console.log("🔵 Friends data:",a),console.log("🔵 Friend requests data:",l),a.length>2&&c.push("More than 2 friendship records found (should be max 2 - one in each direction)"),l.length>2&&c.push("More than 2 friend request records found (should be max 2 - one in each direction)"),a.filter(e=>"accepted"===e.status).length>0&&l.length>0&&c.push("Found accepted friendships AND friend requests - this should not happen"),{friendsData:a,friendRequestsData:l,inconsistencies:c}}catch(e){return console.error("🔴 Error debugging friendship data:",e),{friendsData:[],friendRequestsData:[],inconsistencies:["Error occurred while debugging"]}}}static async getFriendRequestStatus(e,s){try{console.log("🔵 Checking friend request status between:",e,s);let[t,i]=await Promise.all([r.supabase.from("friend_requests").select("*").eq("sender_id",e).eq("receiver_id",s).maybeSingle(),r.supabase.from("friend_requests").select("*").eq("sender_id",s).eq("receiver_id",e).maybeSingle()]),n=t.data||i.data;if(!n){if(await this.areFriends(e,s))return{status:"accepted"};return{status:"none"}}if(n.sender_id===e)return{status:"pending"===n.status?"pending_sent":n.status,request:n};return{status:"pending"===n.status?"pending_received":n.status,request:n}}catch(e){return console.error("🔴 Error checking friend request status:",e),{status:"none"}}}static async areFriends(e,s){try{console.log("🔵 Checking if users are friends:",e,s);let[t,i]=await Promise.all([r.supabase.from("friends").select("id").eq("user_id",e).eq("friend_id",s).eq("status","accepted").maybeSingle(),r.supabase.from("friends").select("id").eq("user_id",s).eq("friend_id",e).eq("status","accepted").maybeSingle()]),n=!!(t.data||i.data);return console.log("🔵 Are friends result:",n),n}catch(e){return console.error("🔴 Error checking friendship:",e),!1}}static async getMutualFriends(e,s){let{data:t,error:i}=await r.supabase.from("friends").select("friend_id").eq("user_id",e).eq("status","accepted");if(i)throw console.error("🔴 Error fetching user1 friends:",i),Error(i.message);let{data:n,error:o}=await r.supabase.from("friends").select("friend_id").eq("user_id",s).eq("status","accepted");if(o)throw console.error("🔴 Error fetching user2 friends:",o),Error(o.message);let a=(null==t?void 0:t.map(e=>e.friend_id))||[],l=(null==n?void 0:n.map(e=>e.friend_id))||[],c=a.filter(e=>l.includes(e));if(0===c.length)return[];let{data:d,error:u}=await r.supabase.from("user_profiles").select("\n        id,\n        full_name,\n        username,\n        avatar_url,\n        bio,\n        location,\n        is_online,\n        last_seen\n      ").in("id",c);if(u)throw console.error("🔴 Error fetching mutual friends profiles:",u),Error(u.message);return d||[]}}},47604,e=>{"use strict";e.s(["ChatBubbleLeftRightIcon",()=>s],47604);var r=e.i(71645);let s=r.forwardRef(function(e,s){let{title:t,titleId:i,...n}=e;return r.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true","data-slot":"icon",ref:s,"aria-labelledby":i},n),t?r.createElement("title",{id:i},t):null,r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 0 1-.825-.242m9.345-8.334a2.126 2.126 0 0 0-.476-.095 48.64 48.64 0 0 0-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0 0 11.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155"}))})},99749,e=>{"use strict";function r(e,r,s){return r in e?Object.defineProperty(e,r,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[r]=s,e}e.s(["_",()=>r])},55344,e=>{"use strict";e.s(["RealtimeProvider",()=>u,"useRealtime",()=>g],55344);var r=e.i(43476),s=e.i(71645),t=e.i(17927),i=e.i(83642),n=e.i(70011),o=e.i(65300);class a{static async testPresenceTable(){try{console.log("🔵 Testing user_presence table accessibility...");let{data:e,error:r}=await t.supabase.from("user_presence").select("id").limit(1);if(r)return console.error("🔴 user_presence table test failed:",r),console.error("🔴 Error code:",r.code),console.error("🔴 Error message:",r.message),console.error("🔴 Error details:",r.details),console.error("🔴 Error hint:",r.hint),!1;return console.log("✅ user_presence table is accessible"),console.log("🔵 Test data:",e),!0}catch(e){return console.error("🔴 user_presence table test error:",e),!1}}static async updateStatus(e,r){try{if(console.log("🔵 Updating user status:",e,"to:",r),!await this.testPresenceTable())throw Error("User presence table is not accessible. Please check RLS policies.");let{data:n,error:o}=await t.supabase.from("user_presence").upsert({user_id:e,status:r,last_seen:new Date().toISOString()},{onConflict:"user_id"}).select().single();if(o){var s,i;if(console.error("🔴 Error updating user status:",o),console.error("🔴 Error code:",o.code),console.error("🔴 Error message:",o.message),console.error("🔴 Error details:",o.details),console.error("🔴 Error hint:",o.hint),console.error("🔴 Full error object:",JSON.stringify(o,null,2)),(null==(s=o.message)?void 0:s.includes("row-level security"))||(null==(i=o.message)?void 0:i.includes("policy"))||"42501"===o.code)throw Error("Permission denied: Unable to update presence status. Please check RLS policies.");throw Error(o.message||"Failed to update user status")}console.log("✅ Successfully updated user status:",n);try{let{error:s}=await t.supabase.from("user_profiles").update({is_online:"online"===r,last_seen:new Date().toISOString()}).eq("id",e);s?console.warn("⚠️ Error updating user profile:",s):console.log("✅ Successfully updated user profile")}catch(e){console.warn("⚠️ Error updating user profile:",e)}return n}catch(e){throw console.error("🔴 Error in updateStatus:",e),e}}static async getUserStatus(e){let{data:r,error:s}=await t.supabase.from("user_presence").select("*").eq("user_id",e).single();if(s){if("PGRST116"===s.code)return null;throw console.error("🔴 Error fetching user status:",s),Error(s.message)}return r}static async getOnlineFriends(e){try{console.log("🔵 Getting online friends for user:",e);let{data:r,error:s}=await t.supabase.from("friends").select("friend_id").eq("user_id",e).eq("status","accepted");if(s)throw console.error("🔴 Error fetching friends:",s),console.error("🔴 Error details:",s),Error("Failed to fetch friends: ".concat(s.message));if(!r||0===r.length)return console.log("🔵 No friends found for user"),[];let i=r.map(e=>e.friend_id);console.log("🔵 Found friends:",i.length,"friend IDs:",i),console.log("🔵 Friends details:",r.map(e=>({id:e.friend_id})));let{data:n,error:o}=await t.supabase.from("user_presence").select("user_id, status, last_seen").in("user_id",i).eq("status","online");if(o)throw console.error("🔴 Error fetching presence data:",o),Error(o.message);if(!n||0===n.length)return console.log("🔵 No online friends found"),[];let a=n.map(e=>e.user_id);console.log("🔵 Online friend IDs:",a);let{data:l,error:c}=await t.supabase.from("user_profiles").select("id, full_name, username, avatar_url, is_online, last_seen").in("id",a);if(c)throw console.error("🔴 Error fetching profiles:",c),Error(c.message);let d=(l||[]).map(e=>{let r=n.find(r=>r.user_id===e.id);return{id:e.id,full_name:e.full_name,username:e.username,avatar_url:e.avatar_url,is_online:!0,last_seen:(null==r?void 0:r.last_seen)||e.last_seen,status:(null==r?void 0:r.status)||"online"}});return console.log("✅ Successfully loaded online friends:",d.length),d}catch(e){throw console.error("🔴 Error in getOnlineFriends:",e),e}}static async getOnlineUsers(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:50,{data:r,error:s}=await t.supabase.from("user_presence").select("\n        *,\n        user_profile:user_profiles!user_presence_user_id_fkey(\n          id,\n          full_name,\n          username,\n          avatar_url,\n          is_online,\n          last_seen\n        )\n      ").eq("status","online").order("last_seen",{ascending:!1}).limit(e);if(s)throw console.error("🔴 Error fetching online users:",s),Error(s.message);return(r||[]).map(e=>({id:e.user_profile.id,full_name:e.user_profile.full_name,username:e.user_profile.username,avatar_url:e.user_profile.avatar_url,is_online:!0,last_seen:e.last_seen,status:e.status}))}static async setAway(e){await this.updateStatus(e,"away")}static async setOffline(e){await this.updateStatus(e,"offline")}static async setOnline(e){await this.updateStatus(e,"online")}static async getRecentlyActiveUsers(e){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:20,s=new Date(Date.now()-864e5).toISOString(),{data:i,error:n}=await t.supabase.from("user_presence").select("\n        *,\n        user_profile:user_profiles!user_presence_user_id_fkey(\n          id,\n          full_name,\n          username,\n          avatar_url,\n          is_online,\n          last_seen\n        )\n      ").neq("user_id",e).gte("last_seen",s).order("last_seen",{ascending:!1}).limit(r);if(n)throw console.error("🔴 Error fetching recently active users:",n),Error(n.message);return(i||[]).map(e=>({id:e.user_profile.id,full_name:e.user_profile.full_name,username:e.user_profile.username,avatar_url:e.user_profile.avatar_url,is_online:"online"===e.status,last_seen:e.last_seen,status:e.status}))}static subscribeToPresenceChanges(e,r){return t.supabase.channel("presence_changes").on("postgres_changes",{event:"*",schema:"public",table:"user_presence",filter:"user_id=eq.".concat(e)},e=>{r(e.new)}).subscribe()}static subscribeToFriendsPresence(e,r){return t.supabase.from("friends").select("friend_id").eq("user_id",e).eq("status","accepted").then(e=>{let{data:s}=e;if(!s||0===s.length)return null;let i=s.map(e=>e.friend_id);return t.supabase.channel("friends_presence").on("postgres_changes",{event:"*",schema:"public",table:"user_presence",filter:"user_id=in.(".concat(i.join(","),")")},e=>{r(e.new)}).subscribe()})}}var l=e.i(99749);class c{static async testTypingTable(){try{console.log("🧪 Testing typing_indicators table access...");let{data:e,error:r}=await t.supabase.from("typing_indicators").select("id").limit(1);if(r)return console.error("🔴 Typing table test failed:",r),console.error("🔴 Error code:",r.code),console.error("🔴 Error message:",r.message),!1;return console.log("✅ Typing table test passed:",e),!0}catch(e){return console.error("🔴 Typing table test error:",e),!1}}static async isUserParticipant(e,r){try{console.log("🔍 Checking chat participation:",{userId:e,chatId:r});let{data:s,error:i}=await t.supabase.from("chat_participants").select("chat_id").eq("chat_id",r).eq("user_id",e).single();if(i)return console.error("🔴 Chat participation check failed:",i),!1;return console.log("✅ User is participant in chat:",s),!0}catch(e){return console.error("🔴 Chat participation check error:",e),!1}}static async startTyping(e,r){try{if(!e||!r)return void console.error("🔴 Invalid parameters:",{userId:e,chatId:r});let{data:{user:s},error:i}=await t.supabase.auth.getUser();if(i||!s)return void console.error("🔴 User not authenticated:",i);if(s.id!==e)return void console.error("🔴 User ID mismatch:",{authenticatedUserId:s.id,providedUserId:e});if(!await this.isUserParticipant(e,r))return void console.error("🔴 User is not a participant in this chat:",{userId:e,chatId:r});if(!await this.testTypingTable())return void console.error("🔴 Typing table is not accessible. Check RLS policies.");let n=this.stopTypingTimeouts.get("".concat(e,"-").concat(r));n&&(clearTimeout(n),this.stopTypingTimeouts.delete("".concat(e,"-").concat(r)));let o="".concat(e,"-").concat(r);if(this.typingTimeouts.has(o))return;this.typingTimeouts.set(o,!0),console.log("🔵 Sending typing indicator to database:",{userId:e,chatId:r});let{data:a,error:l}=await t.supabase.from("typing_indicators").upsert({user_id:e,chat_id:r,is_typing:!0,timestamp:new Date().toISOString()},{onConflict:"user_id,chat_id"}).select();l?(console.error("🔴 Error sending typing indicator:",l),console.error("🔴 Error code:",l.code),console.error("🔴 Error message:",l.message),console.error("🔴 Error details:",l.details),console.error("🔴 Error hint:",l.hint),console.error("🔴 Full error object:",JSON.stringify(l,null,2))):console.log("🔵 Typing indicator sent successfully:",{userId:e,chatId:r,data:a})}catch(e){console.error("🔴 Error in startTyping:",e),console.error("🔴 Error stack:",e instanceof Error?e.stack:"No stack trace")}}static async stopTyping(e,r){try{let s="".concat(e,"-").concat(r);this.typingTimeouts.delete(s);let i=this.stopTypingTimeouts.get(s);i&&(clearTimeout(i),this.stopTypingTimeouts.delete(s)),console.log("🔵 Sending stop typing indicator to database:",{userId:e,chatId:r});let{data:n,error:o}=await t.supabase.from("typing_indicators").upsert({user_id:e,chat_id:r,is_typing:!1,timestamp:new Date().toISOString()},{onConflict:"user_id,chat_id"}).select();o?(console.error("🔴 Error stopping typing indicator:",o),console.error("🔴 Error details:",o)):console.log("🔵 Typing indicator stopped successfully:",{userId:e,chatId:r,data:n})}catch(e){console.error("🔴 Error in stopTyping:",e)}}static handleTyping(e,r){console.log("🔵 TypingService.handleTyping called:",{userId:e,chatId:r});let s="".concat(e,"-").concat(r),t=this.stopTypingTimeouts.get(s);t&&clearTimeout(t),this.typingTimeouts.has(s)?console.log("🔵 Already typing, extending timeout:",{userId:e,chatId:r}):(console.log("🔵 Starting typing immediately:",{userId:e,chatId:r}),this.startTyping(e,r));let i=setTimeout(()=>{console.log("🔵 Stop typing timeout triggered:",{userId:e,chatId:r}),this.stopTyping(e,r)},1e3);this.stopTypingTimeouts.set(s,i)}static async getTypingIndicators(e){try{let{data:r,error:s}=await t.supabase.from("typing_indicators").select("\n          *,\n          user_profile:user_profiles!typing_indicators_user_id_fkey(\n            id,\n            full_name,\n            username,\n            avatar_url\n          )\n        ").eq("chat_id",e).eq("is_typing",!0).gte("timestamp",new Date(Date.now()-5e3).toISOString());if(s)return console.error("🔴 Error fetching typing indicators:",s),[];return r||[]}catch(e){return console.error("🔴 Error in getTypingIndicators:",e),[]}}static async cleanupOldIndicators(){try{let{error:e}=await t.supabase.from("typing_indicators").delete().lt("timestamp",new Date(Date.now()-1e4).toISOString());e&&console.error("🔴 Error cleaning up typing indicators:",e)}catch(e){console.error("🔴 Error in cleanupOldIndicators:",e)}}static async clearUserTyping(e){try{for(let[r,s]of(console.log("🔵 Clearing typing indicators for user:",e),this.typingTimeouts.entries()))r.startsWith("".concat(e,"-"))&&(clearTimeout(s),this.typingTimeouts.delete(r));for(let[r,s]of this.stopTypingTimeouts.entries())r.startsWith("".concat(e,"-"))&&(clearTimeout(s),this.stopTypingTimeouts.delete(r));console.log("🔵 Setting typing indicators to false for user:",e);let{data:r,error:s}=await t.supabase.from("typing_indicators").select("chat_id").eq("user_id",e).eq("is_typing",!0);if(s)return void console.error("🔴 Error fetching user typing indicators:",s);if(r&&r.length>0){let s=r.map(r=>({user_id:e,chat_id:r.chat_id,is_typing:!1,timestamp:new Date().toISOString()})),{data:i,error:n}=await t.supabase.from("typing_indicators").upsert(s,{onConflict:"user_id,chat_id"}).select();n?(console.error("🔴 Error clearing user typing indicators:",n),console.error("🔴 Error details:",n)):console.log("🔵 Successfully cleared typing indicators:",{userId:e,updatedCount:(null==i?void 0:i.length)||0})}else console.log("🔵 No active typing indicators found for user:",e)}catch(e){console.error("🔴 Error in clearUserTyping:",e),console.error("🔴 Error details:",e)}}static async testTypingManually(e,r){console.log("🧪 Manual Typing Test:",{userId:e,chatId:r});try{let s=await this.isUserParticipant(e,r);console.log("🧪 Is participant:",s);let i=await this.testTypingTable();console.log("🧪 Table accessible:",i),console.log("🧪 Manually inserting typing indicator...");let{data:n,error:o}=await t.supabase.from("typing_indicators").upsert({user_id:e,chat_id:r,is_typing:!0,timestamp:new Date().toISOString()},{onConflict:"user_id,chat_id"}).select();o?console.error("🧪 Manual insert error:",o):console.log("🧪 Manual insert success:",n);let{data:a,error:l}=await t.supabase.from("typing_indicators").select("*").eq("chat_id",r);l?console.error("🧪 Select error:",l):console.log("🧪 All indicators in database:",a)}catch(e){console.error("🧪 Manual test error:",e)}}}(0,l._)(c,"typingTimeouts",new Map),(0,l._)(c,"stopTypingTimeouts",new Map);let d=(0,s.createContext)(void 0);function u(e){let{children:l}=e,{user:u}=(0,i.useAuth)(),[g,f]=(0,s.useState)([]),[p,h]=(0,s.useState)(null),[m,_]=(0,s.useState)([]),[y,w]=(0,s.useState)({}),[b,v]=(0,s.useState)({sent:[],received:[]}),[E,q]=(0,s.useState)([]),[S,T]=(0,s.useState)([]),[F,x]=(0,s.useState)(null),[C,k]=(0,s.useState)({}),[R,I]=(0,s.useState)(!1),[O,P]=(0,s.useState)(null),[U,N]=(0,s.useState)([]),D=(0,s.useRef)([]);(0,s.useEffect)(()=>{if(console.log("🔵 Realtime useEffect triggered, user:",(null==u?void 0:u.id)||"NO USER"),!u){console.log("🔵 No user, cleaning up subscriptions..."),U.forEach(e=>{t.supabase.removeChannel(e)}),N([]),f([]),h(null),_([]),w({}),v({sent:[],received:[]}),q([]),T([]),x(null),k({}),I(!1);return}console.log("🔵 Setting timeout to initialize realtime...");let e=setTimeout(()=>{console.log("🔵 Timeout triggered, calling initializeRealtime..."),j()},100);return()=>{clearTimeout(e),U.forEach(e=>{t.supabase.removeChannel(e)})}},[u]);let j=async()=>{try{I(!1),P(null),console.log("🔵 Initializing realtime..."),await L(),await Promise.all([M(),A(),G()]),await B(),console.log("🔵 Setting up subscriptions..."),await W(),console.log("🔵 Subscriptions setup complete"),I(!0),console.log("✅ Realtime initialization complete")}catch(e){console.error("🔴 Error initializing realtime:",e),P(e instanceof Error?e.message:"Failed to connect")}},M=async()=>{if(u)try{let e=await n.ChatsService.getUserChats(u.id);f(e),D.current=e;let r={};e.forEach(e=>{r[e.id]=e.unread_count||0}),w(r)}catch(e){console.error("🔴 Error loading chats:",e)}},A=async()=>{if(u)try{if(console.log("🔵 Loading friend requests for user:",u.id),!await o.FriendsService.testFriendRequestsTable()){console.warn("⚠️ friend_requests table is not accessible, skipping friend requests"),v({sent:[],received:[]});return}let e=await o.FriendsService.getFriendRequests(u.id);console.log("✅ Friend requests loaded:",e);let r={sent:e.sent.filter(e=>"pending"===e.status),received:e.received.filter(e=>"pending"===e.status)},s={sent:r.sent.filter((e,r,s)=>r===s.findIndex(r=>r.id===e.id)),received:r.received.filter((e,r,s)=>r===s.findIndex(r=>r.id===e.id))};console.log("✅ Deduplicated friend requests (pending only):",s),v(s)}catch(e){console.error("🔴 Error loading friend requests:",e),console.error("🔴 Error details:",{message:e instanceof Error?e.message:"Unknown error",user:u.id}),v({sent:[],received:[]})}},L=async()=>{if(u)try{console.log("🔵 Loading friends...");let e=(await o.FriendsService.getFriends(u.id,"accepted")).filter((e,r,s)=>r===s.findIndex(r=>r.id===e.id));q(e),console.log("✅ Loaded friends:",e.length,"friends")}catch(e){console.error("🔴 Error loading friends:",e),q([])}},G=async()=>{if(u)try{let e=await a.getUserStatus(u.id);x(e),(null==e?void 0:e.status)!=="online"&&await a.setOnline(u.id)}catch(e){console.error("🔴 Error loading user presence:",e)}},B=async()=>{if(u)try{console.log("🔵 Loading initial online friends...");let e=(await a.getOnlineFriends(u.id)).map(e=>e.id);T(e),console.log("✅ Loaded online friends:",e.length,"friends online")}catch(e){console.error("🔴 Error loading online friends:",e),console.log("🔵 Falling back to empty online friends list"),T([])}},W=async()=>{if(!u)return void console.log("🔵 No user, skipping subscription setup");console.log("🔵 Setting up all subscriptions for user:",u.id);let e=[],r=t.supabase.channel("user_messages").on("postgres_changes",{event:"INSERT",schema:"public",table:"messages"},async e=>{let r=e.new;if(console.log("🔵 New message received:",r),!D.current.some(e=>e.id===r.chat_id))try{let{data:e,error:s}=await t.supabase.from("chat_participants").select("chat_id").eq("chat_id",r.chat_id).eq("user_id",u.id).single();if(s||!e)return void console.log("🔵 User not participant in chat, ignoring message:",null==s?void 0:s.message)}catch(e){console.log("🔵 Error checking participant status, ignoring message:",e);return}_(e=>[...e.filter(e=>!(e.id.startsWith("temp-")&&e.sender_id===r.sender_id&&e.content===r.content&&e.chat_id===r.chat_id)),r]),f(e=>(0===e.length&&(console.log("🔵 Chats array is empty, refreshing..."),M()),e)),f(e=>{let s=e.map(e=>e.id===r.chat_id?{...e,last_message:r,last_message_at:r.created_at,unread_count:r.sender_id!==u.id?(e.unread_count||0)+1:e.unread_count||0}:e);return D.current=s,s}),r.sender_id!==u.id&&w(e=>({...e,[r.chat_id]:(e[r.chat_id]||0)+1}))}).subscribe();e.push(r);let s=t.supabase.channel("friend_requests").on("postgres_changes",{event:"*",schema:"public",table:"friend_requests",filter:"or(sender_id.eq.".concat(u.id,",receiver_id.eq.").concat(u.id,")")},async e=>{console.log("🔵 Friend request change detected:",e),console.log("🔵 Event type:",e.eventType),console.log("🔵 New data:",e.new),console.log("🔵 Old data:",e.old),"INSERT"===e.eventType?console.log("🔵 New friend request created"):"UPDATE"===e.eventType?(console.log("🔵 Friend request updated:",e.new),"pending"!==e.new.status&&console.log("🔵 Request processed, removing from pending list")):"DELETE"===e.eventType&&console.log("🔵 Friend request deleted"),console.log("🔵 Refreshing friend requests in 100ms..."),setTimeout(async()=>{console.log("🔵 Executing refresh now..."),await Promise.all([A(),L()]),console.log("🔵 Refresh completed")},100)}).subscribe(e=>{console.log("🔵 Friend requests channel status:",e)});e.push(s);let i=t.supabase.channel("friends").on("postgres_changes",{event:"*",schema:"public",table:"friends",filter:"user_id.eq.".concat(u.id)},async()=>{await Promise.all([M(),L(),B()])}).subscribe();e.push(i);let n=t.supabase.channel("friends_presence_".concat(u.id)).on("postgres_changes",{event:"*",schema:"public",table:"user_presence"},async e=>{let r=e.new,s=E.some(e=>e.friend_id===r.user_id);console.log("🔵 Presence update received:",{userId:r.user_id,status:r.status,isFriend:s,currentFriends:E.map(e=>e.friend_id),currentOnlineFriends:S}),s?(console.log("🔵 Friend presence update:",r.user_id,"status:",r.status),"online"===r.status?T(e=>{let s=[...new Set([...e,r.user_id])];return console.log("✅ Added friend to online list:",r.user_id,"Total online:",s.length),s}):T(e=>{let s=e.filter(e=>e!==r.user_id);return console.log("✅ Removed friend from online list:",r.user_id,"Total online:",s.length),s})):(console.log("🔵 Ignoring presence update for non-friend:",r.user_id),console.log("🔵 Available friends:",E.map(e=>{var r;return{id:e.friend_id,name:null==(r=e.friend_profile)?void 0:r.full_name}})))}).subscribe();e.push(n);let o=t.supabase.channel("chat_participants").on("postgres_changes",{event:"*",schema:"public",table:"chat_participants",filter:"user_id.eq.".concat(u.id)},async()=>{await M()}).subscribe();e.push(o),console.log("🔵 Setting up typing indicators subscription for user:",u.id);let a=t.supabase.channel("typing_indicators_".concat(u.id)).on("postgres_changes",{event:"*",schema:"public",table:"typing_indicators"},async e=>{console.log("🔵 Raw typing payload received:",e);let r=e.new;console.log("🔵 Typing indicator received:",r),console.log("🔵 Current user:",u.id),console.log("🔵 Typing user:",r.user_id),console.log("🔵 Chat ID:",r.chat_id),console.log("🔵 Is typing:",r.is_typing);let s=D.current.some(e=>e.id===r.chat_id);return(console.log("🔵 Is participant:",s),console.log("🔵 Available chats:",D.current.map(e=>e.id)),s)?r.user_id===u.id?void console.log("🔵 Ignoring own typing indicator for self"):void k(e=>{let s=r.chat_id,t=e[s]||[];if(console.log("🔵 Updating typing indicators state:",{chatId:s,currentIndicators:t.length,isTyping:r.is_typing,typingUserId:r.user_id}),r.is_typing){let i=t.findIndex(e=>e.user_id===r.user_id);if(i>=0){let n=[...t];return n[i]=r,console.log("🔵 Updated existing typing indicator:",n),{...e,[s]:n}}{let i=[...t,r];return console.log("🔵 Added new typing indicator:",i),{...e,[s]:i}}}{let i=t.filter(e=>e.user_id!==r.user_id);return console.log("🔵 Removed typing indicator:",i),{...e,[s]:i}}}):void console.log("🔵 User not participant in chat, ignoring typing indicator")}).subscribe(e=>{console.log("🔵 Typing subscription status:",e)});e.push(a),N(e)},Y=(0,s.useCallback)(async(e,r,s)=>{var t,i,o;if(!u)return;let a={id:"temp-".concat(Date.now()),chat_id:e,sender_id:u.id,content:r.trim(),message_type:"text",reply_to_id:s||null,edited_at:null,created_at:new Date().toISOString(),updated_at:new Date().toISOString(),sender_profile:{id:u.id,full_name:(null==(t=u.user_metadata)?void 0:t.full_name)||"",username:(null==(i=u.user_metadata)?void 0:i.username)||"",avatar_url:(null==(o=u.user_metadata)?void 0:o.avatar_url)||null,location:null}};_(e=>[...e,a]);try{await n.ChatsService.sendMessage(e,u.id,r,"text",s)}catch(e){throw _(e=>e.filter(e=>e.id!==a.id)),console.error("🔴 Error sending message:",e),e}},[u]),z=(0,s.useCallback)(async e=>{if(u)try{await n.ChatsService.markMessagesAsRead(e,u.id),w(r=>({...r,[e]:0})),f(r=>r.map(r=>r.id===e?{...r,unread_count:0}:r))}catch(e){console.error("🔴 Error marking messages as read:",e)}},[u]),J=(0,s.useCallback)(async()=>{await M()},[]),Z=(0,s.useCallback)(async()=>{await A()},[]),H=(0,s.useCallback)(e=>{v(r=>({...r,sent:[...r.sent,e]}))},[]),K=(0,s.useCallback)(async e=>{if(u)try{let r=await n.ChatsService.getChatMessages(e,u.id);_(s=>[...s.filter(r=>r.chat_id!==e),...r]),await z(e)}catch(e){console.error("🔴 Error loading chat messages:",e)}},[u,z]);(0,s.useEffect)(()=>{p&&u&&K(p.id)},[null==p?void 0:p.id,null==u?void 0:u.id,K]),(0,s.useEffect)(()=>{if(!u)return;a.setOnline(u.id);let e=()=>{document.hidden?a.setAway(u.id):(a.setOnline(u.id),setTimeout(()=>{B()},1e3))},r=()=>{a.setOffline(u.id)},s=setInterval(()=>{B()},3e4);return document.addEventListener("visibilitychange",e),window.addEventListener("beforeunload",r),()=>{document.removeEventListener("visibilitychange",e),window.removeEventListener("beforeunload",r),clearInterval(s),a.setOffline(u.id)}},[u]);let V=(0,s.useCallback)(async()=>{u&&(console.log("🔵 Refreshing online friends..."),await B())},[u]),X=(0,s.useCallback)(()=>{console.log("🔍 DEBUG PRESENCE STATE:",{currentUser:null==u?void 0:u.id,friends:E.map(e=>{var r;return{id:e.friend_id,name:null==(r=e.friend_profile)?void 0:r.full_name}}),onlineFriends:S,userPresence:F,isConnected:R,connectionError:O})},[u,E,S,F,R,O]),Q=(0,s.useCallback)(async()=>{u&&(console.log("🧪 TESTING PRESENCE SYSTEM..."),X(),console.log("🔄 Refreshing online friends..."),await B(),console.log("🔄 Updating own presence..."),await a.setOnline(u.id),setTimeout(()=>{console.log("🔍 FINAL STATE:"),X()},2e3))},[u,X,B]),$=(0,s.useCallback)(e=>{u&&(console.log("🔵 RealtimeContext.handleTyping called:",{userId:u.id,chatId:e}),c.handleTyping(u.id,e))},[u]);(0,s.useEffect)(()=>{if(u)return()=>{c.clearUserTyping(u.id)}},[u]);let ee=(0,s.useCallback)(e=>{console.log("🧪 Testing typing indicator for chat:",e);let r=[{id:"test-user",full_name:"Test User",username:"testuser",avatar_url:null}];k(s=>({...s,[e]:r.map(r=>({id:"test-"+Date.now(),user_id:r.id,chat_id:e,is_typing:!0,timestamp:new Date().toISOString(),user_profile:r}))})),setTimeout(()=>{k(r=>({...r,[e]:[]}))},3e3)},[]);return(0,s.useEffect)(()=>{window.debugPresence=X,window.testPresence=Q,window.refreshOnlineFriends=V,window.testTyping=e=>{console.log("🧪 Testing typing for chat:",e),$(e)},window.testTypingIndicator=ee,window.typingIndicators=C,window.testTypingSimple=async e=>{console.log("🧪 Simple Typing Test for chat:",e),console.log("🔍 Current typing indicators:",C),console.log("🔍 Current user:",null==u?void 0:u.id);try{let{data:r,error:s}=await t.supabase.from("typing_indicators").select("*").eq("chat_id",e);console.log("🔍 Database typing indicators:",r),s&&console.error("🔍 Database error:",s)}catch(e){console.error("🔍 Database test error:",e)}console.log("🔍 Active channels:",U.length),U.forEach((e,r)=>{console.log("🔍 Channel ".concat(r,":"),e.topic)})}},[X,Q,V,$,ee,C,u,U]),(0,r.jsx)(d.Provider,{value:{chats:g,currentChat:p,messages:m,unreadCounts:y,friendRequests:b,friends:E,onlineFriends:S,userPresence:F,typingIndicators:C,setCurrentChat:h,sendMessage:Y,markMessagesAsRead:z,refreshChats:J,refreshFriendRequests:Z,refreshOnlineFriends:V,debugPresence:X,testPresence:Q,handleTyping:$,testTypingIndicator:ee,addOptimisticFriendRequest:H,loadChatMessages:K,isConnected:R,connectionError:O},children:l})}function g(){let e=(0,s.useContext)(d);if(void 0===e)throw Error("useRealtime must be used within a RealtimeProvider");return e}},50057,e=>{"use strict";e.s(["ConnectionStatus",()=>n,"OnlineFriendsList",()=>i,"StatusIndicator",()=>t]);var r=e.i(43476),s=e.i(55344);function t(e){let{userId:t,size:i="md",showText:n=!1}=e,{onlineFriends:o}=(0,s.useRealtime)(),a=o.includes(t);return(0,r.jsxs)("div",{className:"flex items-center space-x-2",children:[(0,r.jsx)("div",{className:"".concat({sm:"w-2 h-2",md:"w-3 h-3",lg:"w-4 h-4"}[i]," rounded-full ").concat(a?"bg-green-500 border-2 border-white dark:border-gray-800":"bg-gray-400 border-2 border-white dark:border-gray-800")}),n&&(0,r.jsx)("span",{className:"".concat({sm:"text-xs",md:"text-sm",lg:"text-base"}[i]," text-gray-600 dark:text-gray-400"),children:a?"Online":"Offline"})]})}function i(e){let{maxDisplay:i=5}=e,{chats:n}=(0,s.useRealtime)(),o=n.filter(e=>"direct"===e.type).map(e=>{var r;return null==(r=e.participants)?void 0:r.find(r=>r.user_id!==e.created_by)}).filter(Boolean).filter((e,r,s)=>r===s.findIndex(r=>(null==r?void 0:r.user_id)===(null==e?void 0:e.user_id))).slice(0,i);return(console.log("🔵 OnlineFriendsList - chats:",n.length),console.log("🔵 OnlineFriendsList - onlineFriends:",o.length),console.log("🔵 OnlineFriendsList - user_ids:",o.map(e=>null==e?void 0:e.user_id)),0===o.length)?(0,r.jsx)("div",{className:"text-sm text-gray-500 dark:text-gray-400",children:"No friends online"}):(0,r.jsxs)("div",{className:"space-y-2",children:[(0,r.jsx)("h4",{className:"text-sm font-medium text-gray-700 dark:text-gray-300",children:"Online Friends"}),(0,r.jsx)("div",{className:"space-y-1",children:o.map((e,s)=>{var i,n,o,a,l,c,d;return(0,r.jsxs)("div",{className:"flex items-center space-x-2",children:[(0,r.jsx)("div",{className:"w-6 h-6 rounded-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center",children:(null==e||null==(i=e.user_profile)?void 0:i.avatar_url)?(0,r.jsx)("img",{src:e.user_profile.avatar_url,alt:e.user_profile.full_name||e.user_profile.username||"Friend",className:"w-6 h-6 rounded-full object-cover"}):(0,r.jsx)("span",{className:"text-xs text-gray-600 dark:text-gray-400",children:(null==e||null==(o=e.user_profile)||null==(n=o.full_name)?void 0:n[0])||(null==e||null==(l=e.user_profile)||null==(a=l.username)?void 0:a[0])||"?"})}),(0,r.jsx)("div",{className:"flex-1 min-w-0",children:(0,r.jsx)("p",{className:"text-sm text-gray-900 dark:text-white truncate",children:(null==e||null==(c=e.user_profile)?void 0:c.full_name)||(null==e||null==(d=e.user_profile)?void 0:d.username)||"Unknown"})}),(0,r.jsx)(t,{userId:(null==e?void 0:e.user_id)||"",size:"sm"})]},"online-friend-".concat(null==e?void 0:e.user_id,"-").concat(s))})})]})}function n(e){let{className:t=""}=e,{isConnected:i,connectionError:n}=(0,s.useRealtime)();return n?(0,r.jsxs)("div",{className:"flex items-center space-x-2 text-red-500 ".concat(t),children:[(0,r.jsx)("div",{className:"w-2 h-2 bg-red-500 rounded-full"}),(0,r.jsx)("span",{className:"text-sm",children:"Connection Error"})]}):(0,r.jsxs)("div",{className:"flex items-center space-x-2 ".concat(t),children:[(0,r.jsx)("div",{className:"w-2 h-2 rounded-full ".concat(i?"bg-green-500":"bg-yellow-500")}),(0,r.jsx)("span",{className:"text-sm text-gray-600 dark:text-gray-400",children:i?"Connected":"Connecting..."})]})}}]);